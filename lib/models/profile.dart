import 'package:hive/hive.dart';

part 'profile.g.dart';

@HiveType(typeId: 0)
enum AgeRange {
  @HiveField(0)
  child,
  @HiveField(1)
  teen,
  @HiveField(2)
  adult,
}

@HiveType(typeId: 1)
enum SkillLevel {
  @HiveField(0)
  beginner,
  @HiveField(1)
  intermediate,
  @HiveField(2)
  advanced,
}

@HiveType(typeId: 2)
enum MusicReading {
  @HiveField(0)
  none,
  @HiveField(1)
  basic,
  @HiveField(2)
  fluent,
}

@HiveType(typeId: 3)
enum Goal {
  @HiveField(0)
  fun,
  @HiveField(1)
  technique,
  @HiveField(2)
  theory,
  @HiveField(3)
  songs,
}

@HiveType(typeId: 4)
enum PracticeStyle {
  @HiveField(0)
  short_frequent,
  @HiveField(1)
  long_focused,
}

@HiveType(typeId: 5)
enum DifficultyRamp {
  @HiveField(0)
  gentle,
  @HiveField(1)
  moderate,
  @HiveField(2)
  challenging,
}

@HiveType(typeId: 6)
enum LessonMode {
  @HiveField(0)
  game,
  @HiveField(1)
  structured,
  @HiveField(2)
  free,
}

@HiveType(typeId: 7)
class Preferences {
  @HiveField(0)
  final Goal goal;
  @HiveField(1)
  final PracticeStyle practiceStyle;
  @HiveField(2)
  final DifficultyRamp difficultyRamp;
  @HiveField(3)
  final LessonMode lessonMode;

  Preferences({
    required this.goal,
    required this.practiceStyle,
    required this.difficultyRamp,
    required this.lessonMode,
  });
}

@HiveType(typeId: 8)
class InitialAssessment {
  @HiveField(0)
  final int confidenceRating;
  @HiveField(1)
  final List<String> genrePreference;

  InitialAssessment({
    required this.confidenceRating,
    required this.genrePreference,
  });
}

@HiveType(typeId: 9)
class ProfileMetadata {
  @HiveField(0)
  final DateTime createdAt;
  @HiveField(1)
  final DateTime lastActive;
  @HiveField(2)
  final int xp;
  @HiveField(3)
  final int level;

  ProfileMetadata({
    required this.createdAt,
    required this.lastActive,
    required this.xp,
    required this.level,
  });

  ProfileMetadata copyWith({
    DateTime? createdAt,
    DateTime? lastActive,
    int? xp,
    int? level,
  }) {
    return ProfileMetadata(
      createdAt: createdAt ?? this.createdAt,
      lastActive: lastActive ?? this.lastActive,
      xp: xp ?? this.xp,
      level: level ?? this.level,
    );
  }
}

@HiveType(typeId: 10)
class Profile {
  @HiveField(0)
  final int? profileId; // Will be auto-generated by Hive
  @HiveField(1)
  final String name;
  @HiveField(2)
  final String? avatar;
  @HiveField(3)
  final AgeRange ageRange;
  @HiveField(4)
  final SkillLevel skillLevel;
  @HiveField(5)
  final bool experience; // playsInstrument
  @HiveField(6)
  final MusicReading musicReading;
  @HiveField(7)
  final Preferences preferences;
  @HiveField(8)
  final InitialAssessment initialAssessment;
  @HiveField(9)
  final ProfileMetadata metadata;

  Profile({
    this.profileId,
    required this.name,
    this.avatar,
    required this.ageRange,
    required this.skillLevel,
    required this.experience,
    required this.musicReading,
    required this.preferences,
    required this.initialAssessment,
    required this.metadata,
  });

  Profile copyWith({
    int? profileId,
    String? name,
    String? avatar,
    AgeRange? ageRange,
    SkillLevel? skillLevel,
    bool? experience,
    MusicReading? musicReading,
    Preferences? preferences,
    InitialAssessment? initialAssessment,
    ProfileMetadata? metadata,
  }) {
    return Profile(
      profileId: profileId ?? this.profileId,
      name: name ?? this.name,
      avatar: avatar ?? this.avatar,
      ageRange: ageRange ?? this.ageRange,
      skillLevel: skillLevel ?? this.skillLevel,
      experience: experience ?? this.experience,
      musicReading: musicReading ?? this.musicReading,
      preferences: preferences ?? this.preferences,
      initialAssessment: initialAssessment ?? this.initialAssessment,
      metadata: metadata ?? this.metadata,
    );
  }

  // Helper method to get current level based on XP
  int get currentLevel => (metadata.xp / 1000).floor() + 1;
  
  // Helper method to get XP needed for next level
  int get xpForNextLevel => ((currentLevel * 1000) - metadata.xp);
} 